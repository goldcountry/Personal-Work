#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
CMPS 102 Homework 1
\end_layout

\begin_layout Author
Benjamin Gordon / bcgordon@ucsc.edu
\end_layout

\begin_layout Date
4/21/2014
\end_layout

\begin_layout Section
Problem 1
\end_layout

\begin_layout Subsection
Procedure
\end_layout

\begin_layout Standard
For the purposes of this proof, let us define 
\begin_inset Quotes eld
\end_inset

sequential
\begin_inset Quotes erd
\end_inset

 to be a property of an array such that its first element is smaller than
 its last element; 
\begin_inset Quotes eld
\end_inset

non-sequential
\begin_inset Quotes erd
\end_inset

 will henceforth be used to mean the exact opposite of 
\begin_inset Quotes eld
\end_inset

sequential
\begin_inset Quotes erd
\end_inset

 (I.E.
 the array's first element is greater than its last element).
\end_layout

\begin_layout Standard
First, we check if the entire array is sequential.
 Though we are told that the array wraps around somewhere in the middle,
 it is possible that we could have an edge case in which it wraps around
 at the end of the array, leaving it perfectly ordered; this checks for
 such a case.
 If the array is sequential, then the answer is the last element in the
 array.
 Following this check, we recursively divide the array in half, creating
 two sub-arrays - left and right - and check whether these new sub-arrays
 are sequential.
 At this stage, there are two possible cases:
\end_layout

\begin_layout Enumerate
One of the two sub-arrays is sequential, while the other is non-sequential.
\end_layout

\begin_layout Enumerate
Both of the sub-arrays are sequential.
\end_layout

\begin_layout Standard
If the first case is true, we disregard the sequential sub-array and focus
 on the non-sequential one.
 We continue recursively dividing the arrays and checking whether they are
 sequential until we reach the second case (both arrays are sequential).
 At this point, we know that we have divided the array in between where
 it wraps; our solution is therefore the last element in the left sub-array.
\end_layout

\begin_layout Subsection
Proof of Correctness
\end_layout

\begin_layout Standard
Because the numbers in the array must be distinct and strictly increasing,
 if array[n] > array[n+1] for some index n, then array[n] is the largest
 number in the array.
 The array only wraps around at one point, so when we divide the array in
 half, only one of the halves can contain said point.
 When we check whether one of the two sub-arrays is non-sequential, we are
 actually trying to find which sub-array contians the wrap point.
 As we are only concerned with the sub-array containing the wrap (and therefore
 the largest element), we can disregard the other sub-array.
\end_layout

\begin_layout Standard
However, it is also possible that neither array contains this point; if
 this is the case, then we have divided the array in between the point where
 it wraps.
 This corresponds to case 2 in the procedure.
 If we have, in fact, divided the array between the largest and smallest
 values, then it is obvious that the last element on the left side is the
 largest element.
 The final piece of the proof is to recognize that this algorithm calls
 for us to continue subdividing the array until we divide between the largest
 and smallest elements - so we must eventually find the largest element.
\end_layout

\begin_layout Subsection
Proof of Runtime
\end_layout

\begin_layout Standard
At each recursive step, we:
\end_layout

\begin_layout Itemize
Divide the data set in half,
\end_layout

\begin_layout Itemize
Do two constant-time comparisons, and
\end_layout

\begin_layout Itemize
Continue the recursion on only one half of the data set.
\end_layout

\begin_layout Standard
Therefore, our recurrence relation looks like this:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
T(n)=T(\nicefrac{n}{2})+C
\]

\end_inset


\end_layout

\begin_layout Standard
For this relation, we get 
\emph on
b=1 
\emph default
and 
\emph on
c=2
\emph default
, giving us an E of 0.
 
\begin_inset Formula $O\left(n^{E}\right)=O\left(n^{0}\right)=O\left(1\right)$
\end_inset

, which is the same as our constant-time comparison C; therefore, by case
 2 of the master theorem, our runtime is 
\begin_inset Formula $O\left(n^{E}\log n\right)=O\left(\log n\right).$
\end_inset


\end_layout

\end_body
\end_document
